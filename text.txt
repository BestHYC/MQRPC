//本框架执行的是微软MVC框架,也使用了中间件进行针对数据的操作和管理,传输协议使用MQ
目的:
1.通过protoful协议执行文本操作
2.通过mq执行传输协议
3.通过注册执行固定选项操作服务器固定选项
4.通过中间件执行剩余操作,如果添加Authorization,token,filter操作


注意点:
1.参数的序列化及实际调用方法序列化
2.异步执行顺序速度

使用方不会操作太多,只需要调用对应的Service即可.
Service太多,后台是唯一对应Guid,本地可以使用别名操作(此处)

1.在执行期间,通过反射获取所有的集成BaseController
2.添加数据权限问题


本地发布在IIS环境下,因为会展示页面: 会出现 很多项目 对应的系统数据,每一个系统还包括对树形结构的操作(此处难点是表达式树的保存形式)
有两种方式形成:一种是 改写成一个统一代码,针对名称做一个case循环,然后调用对应方法,但此种方法比较lower
如 class A:BaseController{
public void Execute(){
}
}
会改写成 ABaseHelperHandler{
void Execute(String name){
switch(name){
case "Execute": new A().Execute();
}
}
}

第二种执行表达式树调取方法方式:这么写不会产生冗余代码,但是调取速度肯定没第一种速度快,好处是,所有代码在运行时生成(第一种对于编译期生成)

此处注意 分布式情况

保存的数据:
1.保存当前菜单选项 menu
 id name parentid description systemid
2.保存当前系统选项 system
id name
3.保存的端口号:做分布式使用
id name host systemid


会展示成一个树形结构展示



序列化:因为是固定的针对protoful进行序列化及反序列化,所以不会出现基类,子类序列化模式报错问题

这点会使用SaaS服务,进行转换
1.先序列化对应的模型,



1.先确定Controller方法解析的过程




















